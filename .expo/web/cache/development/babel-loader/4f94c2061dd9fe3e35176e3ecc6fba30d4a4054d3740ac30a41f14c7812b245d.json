{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nvar _Dimensions$get = Dimensions.get('window'),\n  width = _Dimensions$get.width,\n  height = _Dimensions$get.height;\nvar V_PROPS = ['height', 'top', 'bottom', 'vertical'];\nvar H_PROPS = ['width', 'left', 'right', 'horizontal'];\nvar SUFFIX = '%';\nvar invalidPropMsg = [`Name of variable or property with percent value should contain `, `(${V_PROPS.concat(H_PROPS).join()}) to define base for percent calculation`].join('');\nexport default {\n  isPercent: isPercent,\n  calc: calc\n};\nfunction isPercent(str) {\n  return str.charAt(str.length - 1) === SUFFIX;\n}\nfunction calc(str, prop) {\n  var percent = parseInt(str.substring(0, str.length - 1), 10);\n  var base = isVertical(prop) ? height : width;\n  return base * percent / 100;\n}\nfunction isVertical(prop) {\n  prop = prop.toLowerCase();\n  if (V_PROPS.some(function (p) {\n    return prop.indexOf(p) >= 0;\n  })) {\n    return true;\n  }\n  if (H_PROPS.some(function (p) {\n    return prop.indexOf(p) >= 0;\n  })) {\n    return false;\n  }\n  throw new Error(invalidPropMsg);\n}","map":{"version":3,"names":["_Dimensions$get","Dimensions","get","width","height","V_PROPS","H_PROPS","SUFFIX","invalidPropMsg","concat","join","isPercent","calc","str","charAt","length","prop","percent","parseInt","substring","base","isVertical","toLowerCase","some","p","indexOf","Error"],"sources":["/Users/landroide/Desktop/ReactNative/Pros/WithExpo/Demo-project/node_modules/react-native-extended-stylesheet/src/replacers/percent.js"],"sourcesContent":["/**\n * Calculation of percent strings\n */\n\nimport {Dimensions} from 'react-native';\n\nconst {width, height} = Dimensions.get('window');\nconst V_PROPS = [\n  'height',\n  'top',\n  'bottom',\n  'vertical',\n];\nconst H_PROPS = [\n  'width',\n  'left',\n  'right',\n  'horizontal',\n];\nconst SUFFIX = '%';\nconst invalidPropMsg = [\n  `Name of variable or property with percent value should contain `,\n  `(${V_PROPS.concat(H_PROPS).join()}) to define base for percent calculation`\n  ].join('');\n\nexport default {\n  isPercent,\n  calc,\n};\n\n/**\n * Is string contains percent\n * @param {String} str\n * @returns {boolean}\n */\nfunction isPercent(str) {\n  return str.charAt(str.length - 1) === SUFFIX;\n}\n\n/**\n * Calc percent to pixels\n * @param {String} str\n * @param {String} prop\n * @returns {number}\n */\nfunction calc(str, prop) {\n  let percent = parseInt(str.substring(0, str.length - 1), 10);\n  let base = isVertical(prop) ? height : width;\n  return base * percent / 100;\n}\n\nfunction isVertical(prop) {\n  prop = prop.toLowerCase();\n  if (V_PROPS.some(p => prop.indexOf(p) >= 0)) {\n    return true;\n  }\n  if (H_PROPS.some(p => prop.indexOf(p) >= 0)) {\n    return false;\n  }\n  throw new Error(invalidPropMsg);\n}\n"],"mappings":";AAMA,IAAAA,eAAA,GAAwBC,UAAU,CAACC,GAAG,CAAC,QAAQ,CAAC;EAAzCC,KAAK,GAAAH,eAAA,CAALG,KAAK;EAAEC,MAAM,GAAAJ,eAAA,CAANI,MAAM;AACpB,IAAMC,OAAO,GAAG,CACd,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,UAAU,CACX;AACD,IAAMC,OAAO,GAAG,CACd,OAAO,EACP,MAAM,EACN,OAAO,EACP,YAAY,CACb;AACD,IAAMC,MAAM,GAAG,GAAG;AAClB,IAAMC,cAAc,GAAG,CACpB,iEAAgE,EAChE,IAAGH,OAAO,CAACI,MAAM,CAACH,OAAO,CAAC,CAACI,IAAI,CAAC,CAAE,0CAAyC,CAC3E,CAACA,IAAI,CAAC,EAAE,CAAC;AAEZ,eAAe;EACbC,SAAS,EAATA,SAAS;EACTC,IAAI,EAAJA;AACF,CAAC;AAOD,SAASD,SAASA,CAACE,GAAG,EAAE;EACtB,OAAOA,GAAG,CAACC,MAAM,CAACD,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC,KAAKR,MAAM;AAC9C;AAQA,SAASK,IAAIA,CAACC,GAAG,EAAEG,IAAI,EAAE;EACvB,IAAIC,OAAO,GAAGC,QAAQ,CAACL,GAAG,CAACM,SAAS,CAAC,CAAC,EAAEN,GAAG,CAACE,MAAM,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;EAC5D,IAAIK,IAAI,GAAGC,UAAU,CAACL,IAAI,CAAC,GAAGZ,MAAM,GAAGD,KAAK;EAC5C,OAAOiB,IAAI,GAAGH,OAAO,GAAG,GAAG;AAC7B;AAEA,SAASI,UAAUA,CAACL,IAAI,EAAE;EACxBA,IAAI,GAAGA,IAAI,CAACM,WAAW,CAAC,CAAC;EACzB,IAAIjB,OAAO,CAACkB,IAAI,CAAC,UAAAC,CAAC;IAAA,OAAIR,IAAI,CAACS,OAAO,CAACD,CAAC,CAAC,IAAI,CAAC;EAAA,EAAC,EAAE;IAC3C,OAAO,IAAI;EACb;EACA,IAAIlB,OAAO,CAACiB,IAAI,CAAC,UAAAC,CAAC;IAAA,OAAIR,IAAI,CAACS,OAAO,CAACD,CAAC,CAAC,IAAI,CAAC;EAAA,EAAC,EAAE;IAC3C,OAAO,KAAK;EACd;EACA,MAAM,IAAIE,KAAK,CAAClB,cAAc,CAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}