{"ast":null,"code":"var operators = {\n  '*': function _(v1, v2) {\n    return v1 * v2;\n  },\n  '+': function _(v1, v2) {\n    return v1 + v2;\n  },\n  '-': function _(v1, v2) {\n    return v1 - v2;\n  },\n  '/': function _(v1, v2) {\n    return v1 / v2;\n  }\n};\nexport default {\n  isOperation: isOperation,\n  exec: exec\n};\nfunction isOperation(str) {\n  var opInfo = findOperator(str);\n  if (opInfo) {\n    opInfo.v1 = str.substr(0, opInfo.pos).trim();\n    opInfo.v2 = str.substr(opInfo.pos + 1).trim();\n    delete opInfo.pos;\n    return opInfo;\n  } else {\n    return false;\n  }\n}\nfunction exec(opInfo) {\n  assertOperator(opInfo.operator);\n  assertValue(opInfo.v1);\n  assertValue(opInfo.v2);\n  if (opInfo.operator === '/') {\n    assertDivisor(opInfo.v2);\n  }\n  var fn = operators[opInfo.operator];\n  return fn(opInfo.v1, opInfo.v2);\n}\nfunction findOperator(str) {\n  for (var operator in operators) {\n    var pos = str.indexOf(operator);\n    if (pos >= 0) {\n      return {\n        operator: operator,\n        pos: pos\n      };\n    }\n  }\n}\nfunction assertOperator(operator) {\n  if (!operators[operator]) {\n    throw new Error('Unknown operator: ' + operator);\n  }\n}\nfunction assertValue(value) {\n  if (typeof value !== 'number') {\n    throw new Error('Operation value should be number, you try: ' + String(value));\n  }\n}\nfunction assertDivisor(divisor) {\n  if (divisor === 0) {\n    throw new Error('Operation divisor should not be zero');\n  }\n}","map":{"version":3,"names":["operators","_","v1","v2","isOperation","exec","str","opInfo","findOperator","substr","pos","trim","assertOperator","operator","assertValue","assertDivisor","fn","indexOf","Error","value","String","divisor"],"sources":["/Users/landroide/Desktop/ReactNative/Pros/WithExpo/Demo-project/node_modules/react-native-extended-stylesheet/src/replacers/operation.js"],"sourcesContent":["/**\n * Detects operation in string\n * Supports: '*', '+', '-'\n */\n\nconst operators = {\n  '*': (v1, v2) => v1 * v2,\n  '+': (v1, v2) => v1 + v2,\n  '-': (v1, v2) => v1 - v2,\n  '/': (v1, v2) => v1 / v2,\n};\n\nexport default {\n  isOperation,\n  exec,\n};\n\n/**\n * Is operation in string: '0.25 * $abc' => {operator: '*', v1: '0.25', v2: '$abc'}\n * @param {String} str\n */\nfunction isOperation(str) {\n  let opInfo = findOperator(str);\n  if (opInfo) {\n    opInfo.v1 = str.substr(0, opInfo.pos).trim();\n    opInfo.v2 = str.substr(opInfo.pos + 1).trim();\n    delete opInfo.pos;\n    return opInfo;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Executes operation\n * @param {Object} opInfo\n */\nfunction exec(opInfo) {\n  assertOperator(opInfo.operator);\n  assertValue(opInfo.v1);\n  assertValue(opInfo.v2);\n  if (opInfo.operator === '/') {\n    assertDivisor(opInfo.v2);\n  }\n  let fn = operators[opInfo.operator];\n  return fn(opInfo.v1, opInfo.v2);\n}\n\nfunction findOperator(str) {\n  for (let operator in operators) {\n    let pos = str.indexOf(operator);\n    if (pos >= 0) {\n      return {operator, pos};\n    }\n  }\n}\n\nfunction assertOperator(operator) {\n  if (!operators[operator]) {\n    throw new Error('Unknown operator: ' + operator);\n  }\n}\n\nfunction assertValue(value) {\n  if (typeof value !== 'number') {\n    throw new Error('Operation value should be number, you try: ' + String(value));\n  }\n}\n\nfunction assertDivisor(divisor) {\n  if (divisor === 0) {\n    throw new Error('Operation divisor should not be zero');\n  }\n}\n"],"mappings":"AAKA,IAAMA,SAAS,GAAG;EAChB,GAAG,EAAE,SAAAC,EAACC,EAAE,EAAEC,EAAE;IAAA,OAAKD,EAAE,GAAGC,EAAE;EAAA;EACxB,GAAG,EAAE,SAAAF,EAACC,EAAE,EAAEC,EAAE;IAAA,OAAKD,EAAE,GAAGC,EAAE;EAAA;EACxB,GAAG,EAAE,SAAAF,EAACC,EAAE,EAAEC,EAAE;IAAA,OAAKD,EAAE,GAAGC,EAAE;EAAA;EACxB,GAAG,EAAE,SAAAF,EAACC,EAAE,EAAEC,EAAE;IAAA,OAAKD,EAAE,GAAGC,EAAE;EAAA;AAC1B,CAAC;AAED,eAAe;EACbC,WAAW,EAAXA,WAAW;EACXC,IAAI,EAAJA;AACF,CAAC;AAMD,SAASD,WAAWA,CAACE,GAAG,EAAE;EACxB,IAAIC,MAAM,GAAGC,YAAY,CAACF,GAAG,CAAC;EAC9B,IAAIC,MAAM,EAAE;IACVA,MAAM,CAACL,EAAE,GAAGI,GAAG,CAACG,MAAM,CAAC,CAAC,EAAEF,MAAM,CAACG,GAAG,CAAC,CAACC,IAAI,CAAC,CAAC;IAC5CJ,MAAM,CAACJ,EAAE,GAAGG,GAAG,CAACG,MAAM,CAACF,MAAM,CAACG,GAAG,GAAG,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;IAC7C,OAAOJ,MAAM,CAACG,GAAG;IACjB,OAAOH,MAAM;EACf,CAAC,MAAM;IACL,OAAO,KAAK;EACd;AACF;AAMA,SAASF,IAAIA,CAACE,MAAM,EAAE;EACpBK,cAAc,CAACL,MAAM,CAACM,QAAQ,CAAC;EAC/BC,WAAW,CAACP,MAAM,CAACL,EAAE,CAAC;EACtBY,WAAW,CAACP,MAAM,CAACJ,EAAE,CAAC;EACtB,IAAII,MAAM,CAACM,QAAQ,KAAK,GAAG,EAAE;IAC3BE,aAAa,CAACR,MAAM,CAACJ,EAAE,CAAC;EAC1B;EACA,IAAIa,EAAE,GAAGhB,SAAS,CAACO,MAAM,CAACM,QAAQ,CAAC;EACnC,OAAOG,EAAE,CAACT,MAAM,CAACL,EAAE,EAAEK,MAAM,CAACJ,EAAE,CAAC;AACjC;AAEA,SAASK,YAAYA,CAACF,GAAG,EAAE;EACzB,KAAK,IAAIO,QAAQ,IAAIb,SAAS,EAAE;IAC9B,IAAIU,GAAG,GAAGJ,GAAG,CAACW,OAAO,CAACJ,QAAQ,CAAC;IAC/B,IAAIH,GAAG,IAAI,CAAC,EAAE;MACZ,OAAO;QAACG,QAAQ,EAARA,QAAQ;QAAEH,GAAG,EAAHA;MAAG,CAAC;IACxB;EACF;AACF;AAEA,SAASE,cAAcA,CAACC,QAAQ,EAAE;EAChC,IAAI,CAACb,SAAS,CAACa,QAAQ,CAAC,EAAE;IACxB,MAAM,IAAIK,KAAK,CAAC,oBAAoB,GAAGL,QAAQ,CAAC;EAClD;AACF;AAEA,SAASC,WAAWA,CAACK,KAAK,EAAE;EAC1B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAM,IAAID,KAAK,CAAC,6CAA6C,GAAGE,MAAM,CAACD,KAAK,CAAC,CAAC;EAChF;AACF;AAEA,SAASJ,aAAaA,CAACM,OAAO,EAAE;EAC9B,IAAIA,OAAO,KAAK,CAAC,EAAE;IACjB,MAAM,IAAIH,KAAK,CAAC,sCAAsC,CAAC;EACzD;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}