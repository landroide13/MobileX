{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport rem from \"./replacers/rem\";\nimport vars from \"./replacers/vars\";\nimport percent from \"./replacers/percent\";\nimport operation from \"./replacers/operation\";\nimport scale from \"./replacers/scale\";\nvar Value = function () {\n  function Value(value, prop) {\n    var varsArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    _classCallCheck(this, Value);\n    this.value = value;\n    this.outValue = null;\n    this.prop = prop;\n    this.varsArr = varsArr;\n    this.stack = options.stack || [];\n    this.isOperation = options.isOperation !== undefined ? options.isOperation : false;\n  }\n  _createClass(Value, [{\n    key: \"calc\",\n    value: function calc() {\n      if (typeof this.value === 'function') {\n        this.value = this.value();\n      }\n      if (typeof this.value === 'string') {\n        this.calcString();\n      } else {\n        this.proxyValue();\n      }\n      if (this.isFinal()) {\n        this.applyScale();\n      }\n      return this.outValue;\n    }\n  }, {\n    key: \"calcString\",\n    value: function calcString() {\n      var actions = [this.tryCalcOperation, this.isOperation ? this.tryCalcPercent : null, this.tryCalcVar, this.tryCalcRem].filter(Boolean);\n      var value = this.tryActions(actions, this.value);\n      if (value !== null) {\n        this.outValue = value;\n      } else {\n        this.proxyValue();\n      }\n    }\n  }, {\n    key: \"tryActions\",\n    value: function tryActions(actions, str) {\n      for (var i = 0; i < actions.length; i++) {\n        var val = actions[i].call(this, str);\n        if (val !== null) {\n          return val;\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"tryCalcOperation\",\n    value: function tryCalcOperation(str) {\n      var opInfo = operation.isOperation(str);\n      if (!opInfo) {\n        return null;\n      }\n      this.isOperation = true;\n      var operands = ['v1', 'v2'];\n      for (var i = 0; i < operands.length; i++) {\n        var operand = operands[i];\n        var operandValue = this.calcOperandValue(opInfo[operand]);\n        if (operandValue !== null) {\n          opInfo[operand] = operandValue;\n        } else {\n          return null;\n        }\n      }\n      return operation.exec(opInfo);\n    }\n  }, {\n    key: \"calcOperandValue\",\n    value: function calcOperandValue(str) {\n      var actions = [this.tryCalcVar, this.tryCalcPercent, this.tryCalcRem, this.tryCalcFloat];\n      return this.tryActions(actions, str);\n    }\n  }, {\n    key: \"tryCalcVar\",\n    value: function tryCalcVar(str) {\n      if (vars.isVar(str)) {\n        var val = vars.calc(str, this.varsArr);\n        if (this.stack.indexOf(str) >= 0) {\n          throw new Error('Cyclic reference: ' + this.stack.concat([str]).join(' -> '));\n        }\n        var options = {\n          stack: this.stack.concat([str]),\n          isOperation: this.isOperation\n        };\n        return new Value(val, str, this.varsArr, options).calc();\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"tryCalcPercent\",\n    value: function tryCalcPercent(str) {\n      if (percent.isPercent(str)) {\n        return percent.calc(str, this.prop);\n      }\n      return null;\n    }\n  }, {\n    key: \"tryCalcRem\",\n    value: function tryCalcRem(str) {\n      if (rem.isRem(str)) {\n        var remValue = vars.get('$rem', this.varsArr);\n        return rem.calc(str, remValue);\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: \"tryCalcFloat\",\n    value: function tryCalcFloat(str) {\n      var val = parseFloat(str);\n      return !isNaN(val) ? val : null;\n    }\n  }, {\n    key: \"isFinal\",\n    value: function isFinal() {\n      return !this.stack.length;\n    }\n  }, {\n    key: \"proxyValue\",\n    value: function proxyValue() {\n      this.outValue = this.value;\n    }\n  }, {\n    key: \"applyScale\",\n    value: function applyScale() {\n      if (vars.isVar(this.prop)) {\n        return;\n      }\n      var scaleFactor = vars.get('$scale', this.varsArr) || 1;\n      if (scaleFactor === 1) {\n        return;\n      }\n      if (scale.isScalable(this.outValue, this.prop)) {\n        this.outValue = scale.calc(this.outValue, scaleFactor);\n      }\n    }\n  }]);\n  return Value;\n}();\nexport { Value as default };","map":{"version":3,"names":["rem","vars","percent","operation","scale","Value","value","prop","varsArr","arguments","length","undefined","options","_classCallCheck","outValue","stack","isOperation","_createClass","key","calc","calcString","proxyValue","isFinal","applyScale","actions","tryCalcOperation","tryCalcPercent","tryCalcVar","tryCalcRem","filter","Boolean","tryActions","str","i","val","call","opInfo","operands","operand","operandValue","calcOperandValue","exec","tryCalcFloat","isVar","indexOf","Error","concat","join","isPercent","isRem","remValue","get","parseFloat","isNaN","scaleFactor","isScalable","default"],"sources":["/Users/landroide/Desktop/ReactNative/Pros/WithExpo/Demo-project/node_modules/react-native-extended-stylesheet/src/value.js"],"sourcesContent":["/**\n * Calculates particular value\n */\n\nimport rem from './replacers/rem';\nimport vars from './replacers/vars';\nimport percent from './replacers/percent';\nimport operation from './replacers/operation';\nimport scale from './replacers/scale';\n\nexport default class Value {\n  /**\n   * Constructor\n   *\n   * @param {*} value\n   * @param {String} prop property for which valye is calculated\n   * @param {Array} varsArr array of objects with vars\n   * @param {Object} [options]\n   * @param {Array} [options.stack] stack of calls when resolving variable\n   * @param {Boolean} [options.isOperation] is value calculated inside operation\n   */\n  constructor(value, prop, varsArr = [], options = {}) {\n    this.value = value;\n    this.outValue = null;\n    this.prop = prop;\n    this.varsArr = varsArr;\n    this.stack = options.stack || [];\n    this.isOperation = options.isOperation !== undefined ? options.isOperation : false;\n  }\n\n  /**\n   * Calculates value:\n   * execute function, resolve var refs, convert string of (rem, percent) to pixels\n   */\n  calc() {\n    if (typeof this.value === 'function') {\n      this.value = this.value();\n    }\n\n    if (typeof this.value === 'string') {\n      this.calcString();\n    } else {\n      this.proxyValue();\n    }\n\n    if (this.isFinal()) {\n      this.applyScale();\n    }\n\n    return this.outValue;\n  }\n\n  /**\n   * Calculates string\n   * Here we do not calc direct percent values as they supported natively since RN 43 (#32).\n   * But keep calculating percent for operands when value defined as operation.\n   */\n  calcString() {\n    let actions = [\n      this.tryCalcOperation,\n      this.isOperation ? this.tryCalcPercent : null,\n      this.tryCalcVar,\n      this.tryCalcRem,\n    ].filter(Boolean);\n    let value = this.tryActions(actions, this.value);\n    if (value !== null) {\n      this.outValue = value;\n    } else {\n      this.proxyValue();\n    }\n  }\n\n  /**\n   * Applies array of calculations to value. Stops on the first calculation that returns not null.\n   * @param {Array} actions\n   * @param {String} str\n   */\n  tryActions(actions, str) {\n    // todo: use for.. of after https://github.com/facebook/react-native/issues/4676\n    for (let i = 0; i < actions.length; i++) {\n      let val = actions[i].call(this, str);\n      if (val !== null) {\n        return val;\n      }\n    }\n    return null;\n  }\n\n  tryCalcOperation(str) {\n    let opInfo = operation.isOperation(str);\n    if (!opInfo) {\n      return null;\n    }\n    this.isOperation = true;\n    // todo: use for.. of after https://github.com/facebook/react-native/issues/4676\n    const operands = ['v1', 'v2'];\n    for (let i = 0; i < operands.length; i++) {\n      const operand = operands[i];\n      const operandValue = this.calcOperandValue(opInfo[operand]);\n      if (operandValue !== null) {\n        opInfo[operand] = operandValue;\n      } else {\n        // if we cant calculate operand - it is not operation, see #3\n        return null;\n      }\n    }\n    return operation.exec(opInfo);\n  }\n\n  calcOperandValue(str) {\n    let actions = [\n      this.tryCalcVar,\n      this.tryCalcPercent,\n      this.tryCalcRem,\n      this.tryCalcFloat,\n    ];\n    return this.tryActions(actions, str);\n  }\n\n  tryCalcVar(str) {\n    if (vars.isVar(str)) {\n      let val = vars.calc(str, this.varsArr);\n      if (this.stack.indexOf(str) >= 0) {\n        throw new Error('Cyclic reference: ' + this.stack.concat([str]).join(' -> '));\n      }\n      const options = {\n        stack: this.stack.concat([str]),\n        isOperation: this.isOperation,\n      };\n      // recursive call because var can link to another var or percent/rem\n      return new Value(val, str, this.varsArr, options).calc();\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Tries calc percent\n   */\n  tryCalcPercent(str) {\n    if (percent.isPercent(str)) {\n      return percent.calc(str, this.prop);\n    }\n    return null;\n  }\n\n  /**\n   * Tries calc rem\n   */\n  tryCalcRem(str) {\n    if (rem.isRem(str)) {\n      let remValue = vars.get('$rem', this.varsArr);\n      return rem.calc(str, remValue);\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Tries calc float value from string\n   */\n  tryCalcFloat(str) {\n    let val = parseFloat(str);\n    return !isNaN(val) ? val : null;\n  }\n\n  /**\n   * Is it final calculation (not recursion)\n   */\n  isFinal() {\n    return !this.stack.length;\n  }\n\n  /**\n   * Just proxies value when no processing needed\n   */\n  proxyValue() {\n    this.outValue = this.value;\n  }\n\n  applyScale() {\n    // do not apply scale to variables, only for final numbers\n    // otherwise scale will be applied several times\n    if (vars.isVar(this.prop)) {\n      return;\n    }\n    let scaleFactor = vars.get('$scale', this.varsArr) || 1;\n    if (scaleFactor === 1) {\n      return;\n    }\n    if (scale.isScalable(this.outValue, this.prop)) {\n      this.outValue = scale.calc(this.outValue, scaleFactor);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}