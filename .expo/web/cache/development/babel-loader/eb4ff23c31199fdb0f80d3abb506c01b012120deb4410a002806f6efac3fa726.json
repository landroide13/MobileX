{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport resolvePath from 'object-resolve-path';\nvar PREFIX = '$';\nexport default {\n  isVar: isVar,\n  calc: calc,\n  extract: extract,\n  get: get\n};\nfunction isVar(str) {\n  return typeof str === 'string' && str.charAt(0) === PREFIX;\n}\nfunction calc(str, varsArr) {\n  var realValue = get(str, varsArr);\n  if (realValue === undefined) {\n    throw new Error(`Unresolved variable: ${str}`);\n  }\n  return realValue;\n}\nfunction extract(obj) {\n  return Object.keys(obj).reduce(function (res, key) {\n    if (isVar(key)) {\n      res = res || {};\n      res[key] = obj[key];\n    }\n    return res;\n  }, null);\n}\nfunction get(name, varsArr) {\n  if (!Array.isArray(varsArr)) {\n    throw new Error('You should pass vars array to vars.get()');\n  }\n  var rootVar = name.match(/[^.[]*/)[0];\n  var isSimpleVar = rootVar === name;\n  for (var i = 0; i < varsArr.length; i++) {\n    var vars = varsArr[i];\n    if (!vars || vars[rootVar] === undefined) {\n      continue;\n    }\n    if (isSimpleVar) {\n      return vars[name];\n    }\n    try {\n      return resolvePath(_defineProperty({}, rootVar, vars[rootVar]), name);\n    } catch (error) {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"names":["resolvePath","PREFIX","isVar","calc","extract","get","str","charAt","varsArr","realValue","undefined","Error","obj","Object","keys","reduce","res","key","name","Array","isArray","rootVar","match","isSimpleVar","i","length","vars","_defineProperty","error"],"sources":["/Users/landroide/Desktop/ReactNative/Pros/WithExpo/Demo-project/node_modules/react-native-extended-stylesheet/src/replacers/vars.js"],"sourcesContent":["/**\n * Variables\n */\n\nimport resolvePath from 'object-resolve-path';\n\nconst PREFIX = '$';\n\nexport default {\n  isVar,\n  calc,\n  extract,\n  get,\n};\n\n/**\n * Is string equals to another variable: '$varName'\n * @param {String} str\n */\nfunction isVar(str) {\n  return typeof str === 'string' && str.charAt(0) === PREFIX;\n}\n\n/**\n * Replace var with value from vars arr.\n * @param {String} str variable name with $, e.g. '$color'\n * @param {Array<Object>} varsArr array of variable sets to search into.\n */\nfunction calc(str, varsArr) {\n  let realValue = get(str, varsArr);\n  if (realValue === undefined) {\n    throw new Error(`Unresolved variable: ${str}`);\n  }\n  return realValue;\n}\n\n/**\n * Extract variables from mixed object\n * @param {Object} obj\n * @returns {null|Object}\n */\nfunction extract(obj) {\n  return Object.keys(obj).reduce((res, key) => {\n    if (isVar(key)) {\n      res = res || {};\n      res[key] = obj[key];\n    }\n    return res;\n  }, null);\n}\n\n/**\n * Return variable value using provided array of variable sets\n * @param {String} name variable with $, e.g. '$myVar'\n * @param {Array} varsArr array of variable sets\n */\nfunction get(name, varsArr) {\n  if (!Array.isArray(varsArr)) {\n    throw new Error('You should pass vars array to vars.get()');\n  }\n\n  const rootVar = name.match(/[^.[]*/)[0];\n  const isSimpleVar = rootVar === name;\n\n  // todo: use for.. of after https://github.com/facebook/react-native/issues/4676\n  for (let i = 0; i < varsArr.length; i++) {\n    let vars = varsArr[i];\n    if (!vars || vars[rootVar] === undefined) {\n      continue;\n    }\n    if (isSimpleVar) {\n      return vars[name];\n    }\n    try {\n      return resolvePath({[rootVar]: vars[rootVar]}, name);\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n"],"mappings":";AAIA,OAAOA,WAAW,MAAM,qBAAqB;AAE7C,IAAMC,MAAM,GAAG,GAAG;AAElB,eAAe;EACbC,KAAK,EAALA,KAAK;EACLC,IAAI,EAAJA,IAAI;EACJC,OAAO,EAAPA,OAAO;EACPC,GAAG,EAAHA;AACF,CAAC;AAMD,SAASH,KAAKA,CAACI,GAAG,EAAE;EAClB,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,CAACC,MAAM,CAAC,CAAC,CAAC,KAAKN,MAAM;AAC5D;AAOA,SAASE,IAAIA,CAACG,GAAG,EAAEE,OAAO,EAAE;EAC1B,IAAIC,SAAS,GAAGJ,GAAG,CAACC,GAAG,EAAEE,OAAO,CAAC;EACjC,IAAIC,SAAS,KAAKC,SAAS,EAAE;IAC3B,MAAM,IAAIC,KAAK,CAAE,wBAAuBL,GAAI,EAAC,CAAC;EAChD;EACA,OAAOG,SAAS;AAClB;AAOA,SAASL,OAAOA,CAACQ,GAAG,EAAE;EACpB,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,GAAG,EAAK;IAC3C,IAAIf,KAAK,CAACe,GAAG,CAAC,EAAE;MACdD,GAAG,GAAGA,GAAG,IAAI,CAAC,CAAC;MACfA,GAAG,CAACC,GAAG,CAAC,GAAGL,GAAG,CAACK,GAAG,CAAC;IACrB;IACA,OAAOD,GAAG;EACZ,CAAC,EAAE,IAAI,CAAC;AACV;AAOA,SAASX,GAAGA,CAACa,IAAI,EAAEV,OAAO,EAAE;EAC1B,IAAI,CAACW,KAAK,CAACC,OAAO,CAACZ,OAAO,CAAC,EAAE;IAC3B,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EAEA,IAAMU,OAAO,GAAGH,IAAI,CAACI,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvC,IAAMC,WAAW,GAAGF,OAAO,KAAKH,IAAI;EAGpC,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhB,OAAO,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;IACvC,IAAIE,IAAI,GAAGlB,OAAO,CAACgB,CAAC,CAAC;IACrB,IAAI,CAACE,IAAI,IAAIA,IAAI,CAACL,OAAO,CAAC,KAAKX,SAAS,EAAE;MACxC;IACF;IACA,IAAIa,WAAW,EAAE;MACf,OAAOG,IAAI,CAACR,IAAI,CAAC;IACnB;IACA,IAAI;MACF,OAAOlB,WAAW,CAAA2B,eAAA,KAAGN,OAAO,EAAGK,IAAI,CAACL,OAAO,CAAC,GAAGH,IAAI,CAAC;IACtD,CAAC,CAAC,OAAOU,KAAK,EAAE;MACd,OAAOlB,SAAS;IAClB;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}